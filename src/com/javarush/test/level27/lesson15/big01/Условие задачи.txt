****************************************************************
Задание 10
Рекурсию используют тогда, когда алгоритм решения задачи совпадает с алгоритмом решения подзадачи (части).
У нас как раз такой случай. Нам нужно сделать полный перебор всех вариантов и выбрать из них лучший.

Напомню, рекурсия пишется по следующему принципу:
а) условие выхода/окончания рекурсии
б) условие продолжения - вызов самой себя с набором параметров предыдущего шага.
В любое время ты можешь почитать в инете подробную информацию по написанию рекурсии.

Текущее задание - реализовать п.2.2. предыдущего задания с помошью рекурсии.
(подобрать список видео из доступных, просмотр которых обеспечивает максимальную выгоду)
Рекурсивный метод должен выбрать набор рекламных роликов, которые будут показаны посетителю.

Этот набор должен удовлетворять следующим требованиям:
1) сумма денег, полученная от показов, максимальная из всех возможных вариантов
2) общее время показа рекламных роликов НЕ должно превышать время приготовления блюд для текущего заказа
3) для одного заказа любой видео-ролик показывается не более одного раза
4) если существуют несколько вариантов набора видео-роликов с одинаковой суммой денег, полученной от показов, то:
4.1) выбрать тот вариант, у которого суммарное время максимальное
4.2) если суммарное время у этих вариантов одинаковое, то выбрать вариант с минимальным количеством роликов
5) количество показов у любого рекламного ролика из набора - положительное число

При локальном тестировании учитывайте, что необходимо отобразить все рекламные ролики, отобранные для показа,
в порядке уменьшения стоимости показа одного рекламного ролика в копейках.


****************************************************************
Задание 9
Нам понадобится исключение, которое поможет обработать ситуацию, если у нас не будет получаться подобрать рекламные ролики.
1. Создадим unchecked NoVideoAvailableException в пакете ad.

2. Разберем подробно метод void processVideos() в AdvertisementManager.
2.1. Удаляем из него вывод в консоль "processVideos method calling"
Метод должен:
2.2. Подобрать список видео из доступных, просмотр которых обеспечивает максимальную выгоду. (Следующее задание)
2.3. Если нет рекламных видео, которые можно показать посетителю, то бросить NoVideoAvailableException,
которое перехватить в оптимальном месте (подумать, где это место) и с уровнем Level.INFO логировать фразу
"No video is available for the order " + order
2.4. Отобразить все рекламные ролики, отобранные для показа, в порядке уменьшения стоимости показа одного рекламного ролика
в копейках. Вторичная сортировка - по увеличению стоимости показа одной секунды рекламного ролика в тысячных частях копейки
Используйте метод Collections.sort
(Будет тестироваться вместе со следующим заданием)
Пример для заказа [Water]:
First Video is displaying... 50, 277
где First Video - название рекламного ролика
где 50 - стоимость показа одного рекламного ролика в копейках
где 277 - стоимость показа одной секунды рекламного ролика в тысячных частях копейки (равно 0.277 коп)
Используйте методы из класса Advertisement.
2.5. В классе Advertisement создайте метод void revalidate(). Этот метод должен:
2.5.1. кидать UnsupportedOperationException, если количество показов не положительное число
2.5.2. уменьшать количество показов
2.6. Для каждого показанного рекламного ролика пересчитать его данные вызвав метод revalidate() у объекта класса Advertisement.


****************************************************************
Задание 8
Пришло время описать функционал класса AdvertisementManager.
Но для начала нам понадобятся некоторые методы в классе Advertisement.

1. В классе Advertisement создайте поле long amountPerOneDisplaying, которое инициализируйте в конструкторе.
Оно должно равняться стоимости одного показа рекламного объявления в копейках.

2. В классе Advertisement создайте геттеры для полей name, duration и amountPerOneDisplaying

3. Определим необходимые данные для объекта AdvertisementManager - это время выполнения заказа поваром.
Т.к. продолжительность видео у нас хранится в секундах, то и и время выполнения заказа тоже будем принимать в секундах.
В классе AdvertisementManager создайте конструктор, который принимает один параметр - int timeSeconds.
Создайте соответствуйщий филд и сохраните это значение в него.

4. AdvertisementManager выполняет только одно единственное действие - обрабатывает рекламное видео.
Поэтому создайте единственный публичный метод void processVideos(), его функционал опишем в следующем задании.
А пока выведем в консоль "processVideos method calling"

5. Чтобы тестировать данную функциональность, нужно добавить вызов processVideos метода у AdvertisementManager.
Очевидно, что этот метод должен вызываться во время создания заказа, а точнее - в параллельном режиме.
Заказ готовится в то время, как видео смотрится.
Добавьте вызов метода processVideos() в нужное место.


****************************************************************
Задание 7

При выборе, с какого класса начать, старайся найти тот, который используют другие, и который сам ничего не использует.
В нашем случае - это хранилище рекламных роликов (AdvertisementStorage).
Мы решили, что оно будет единственное в ресторане и сделали его синглтоном.
Опишем его.

1. Видео должно где-то храниться, пусть это будет список.
Создадим поле videos и инициализируем его пустым листом. Тип укажите наиболее подходящий.
Подумайте, должно ли поле videos иметь возможность менять свое значение?

2. Чтобы как-то работать с видео, создайте публичные методы:
2.1. list() - который вернет список всех существующих доступных видео
2.2. add(Advertisement advertisement) - который добавит новое видео в список videos

3. Создадим дефолтовый конструктор, в котором проинициализируем лист videos какими-то данными. У меня это:
Object someContent = new Object();
new Advertisement(someContent, "First Video", 5000, 100, 3 * 60) // 3 min
new Advertisement(someContent, "Second Video", 100, 10, 15 * 60) //15 min
new Advertisement(someContent, "Third Video", 400, 2, 10 * 60)   //10 min

4. Сделаем так, чтобы класс AdvertisementStorage не мог использоваться классами из других пакетов

5. В AdvertisementManager создадим final поле-ссылку на экземпляр AdvertisementStorage и назовем ее storage


****************************************************************
Задание 6
Заказ создается, потом готовится поваром, а после этого относится посетителю. К тому же считается время выполнения заказа.
Будем считать, что первая часть задания выполнена.
Перейдем ко второй - пока заказ готовится, на планшете должна показываться реклама.
Определим, что такое реклама.

Реклама - это видео определенной продолжительности. Также известно, что кто-то оплатил количество показов.
Будем считать, что у нас известно количестко оплаченных показов, общая стоимость всех показов и сам рекламный ролик.

1. Для связанного с рекламой функционала создадим пакет ad.

2.Создадим класс Advertisement(Рекламное объявление) в пакете ad, у которого будут следующие поля:
Object content - видео
String name - имя/название
long initialAmount - начальная сумма, стоимость рекламы в копейках. Используем long, чтобы избежать проблем с округлением
int hits - количество оплаченных показов
int duration - продолжительность в секундах
Модификаторы доступа расставьте самостоятельно.

3. В классе Advertisement создадим конструктор с порядком аргументов, соответствующим перечисленной последовательности всех полей класса

4. В этом же пакете создадим еще два класса:
AdvertisementStorage - хранилище рекламных роликов. У нас будет единственное.
AdvertisementManager - у каждого планшета будет свой объект менеджера,
который будет подбирать оптимальный набор роликов и их последовательность для каждого заказа.
Он также будет взаимодействовать с плеером и отображать ролики

5. Т.к. хранилище рекламных роликов AdvertisementStorage единственное для всего ресторана, то сделаем его синглтоном.


****************************************************************
Задание 5
Сейчас повар готовит блюда моментально. На самом деле готовка занимает какое-то время.
Нам нужно вычислить время приготовления всего заказа, чтобы потом подбирать рекламные ролики для этого времени.

1. Предположим, у нас известно время приготовления каждого блюда в минутах. Захардкодим его в классе Dish.
1.1. Измените создание элементов энама - Fish(25), Steak(30), Soup(15), Juice(5), Water(3);
1.2. Создайте поле private int duration с геттером.
Чтобы создать геттер, нажмите Alt+Insert и выберите пункт Getter. Далее выберите имя поля и нажмите OK(Enter).

2. Добавим возможность посчитать продолжительность приготовления всего заказа.
В какое место добавить???
2.1. Если в класс Cook, то повар сможет считать продолжительность приготовления заказа.
Чтобы другие классы могли получить эту инфу, надо будет доступиться к объекту Cook.
2.2. Если в класс Order, то имея доступ к заказу всегда можно узнать продолжительность приготовления.
Но нужно иметь доступ к объекту Order.
2.3. Выберите правильное место из п.2.1. и п.2.2. и добавьте метод int getTotalCookingTime(),
который посчитает суммарное время приготовления всех блюд в заказе.
2.4. Добавим нашему повару вывод в консоль этой информации. Пусть теперь выводится аналогичное сообщение:
Start cooking - Your order: [Soup, Juice, Water] of Tablet{number=5}, cooking time 23min

Наведем некоторые рюшечки:
3. Запустим приложение и сразу введем 'exit'. Вывод получился не очень красивым.
Сделайте так, что если в заказе нет блюд, то чтобы он не отправлялся повару. Найдите это место и реализуйте логику.
В классе Order создайте вспомогательный метод  boolean isEmpty(), который будет определять, есть ли какие либо блюда в заказе.
Подсказка: используйте одноименный метод

4. Запустим приложение и введем 'fff', 'Soup' и 'exit'. В итоге наш заказ - Your order: [Soup], а 'fff' проигнорировано.
Давай уведомим пользователя, что блюда 'fff' нет. Выведем аналогичную фразу
fff is not detected


****************************************************************
Задание 4
Что мы имеем? Повар приготовил блюда, пора их уносить, а официант не знает об этом.
Нужно уведомить официанта, что пора забирать заказ с кухни.
Ситуация аналогична предыдущему заданию, поэтому снова будем использовать паттерн Observer.

1. Создадим класс Waitor(Официант) в пакете kitchen, он будет относить заказы назад к столику. Официант будет безымянный.

2. Cook(Повар) готовит заказы, а Waitor их обрабатывает. Расставьте правильно Observer и Observable между Waitor и Cook.

3. Метод void update пусть выведет в консоль следующее:
order + " was cooked by " + cook

4. В классе-Observable перед отправкой заказа сделаем следующее:
4.1. Установим флаг setChanged()
4.2. Отправим обсерверу заказ notifyObservers(order);

5. Пишем main.
Для объекта Observable добавляем свой объект Observer. См. п.2 и описание паттерна в wikipedia
Называем повара, имя не влияет на тесты. В моем варианте - это Amigo :)

Сверим выводы в консоль. Пример моего вывода:
Your order: [Water] of Tablet{number=5}
Start cooking - Your order: [Water] of Tablet{number=5}
Your order: [Water] of Tablet{number=5} was cooked by Amigo


****************************************************************
Задание 3
Сейчас мы можем создавать заказы. Давайте сделаем, чтобы они автоматически поступали к повару.
Есть много различных способов реализации данной функциональности. Мы будем использовать средства java.
Почитайте про паттерн Observer - http://en.wikipedia.org/wiki/Observer_pattern
Он реализован в java, и мы его будем использовать.

1. Создадим класс Cook(Повар) в пакете kitchen, он будет готовить. Пусть в конструкторе приходит его имя, которое выводится методом toString.

2. Tablet создает заказы, а Cook их обрабатывает. Расставьте правильно Observer и Observable между Tablet и Cook.

3. Метод void update(Observable observable, Object arg), который необходимо реализовать, принимает два параметра.
-observable - объект, который отправил нам значение
-arg - само значение, в нашем случае - это объект Order
На данном этапе мы сымитируем обработку и выведем в консоль "Start cooking - " + order

3. Пишем main.
Для объекта Observable добавляем свой объект Observer. См. п.2 и описание паттерна в wikipedia
Называем повара, имя не влияет на тесты. В моем варианте - это Amigo :)

Сверим выводы в консоль. Пример моего вывода:
Your order: [Soup] of Tablet{number=5}
Start cooking - Your order: [Soup] of Tablet{number=5}

4. Кстати, вы сгенерировали автоматически метод toString в классе Tablet?
Если нет, то внутри класса Tablet нажмите Alt+Insert -> toString()
Результат получится примерно такой: Tablet{number=5}

5. Не забудьте сразу после создания заказа и вывода информации о нем в консоль (найдите это место в коде) сделать следующее:
5.1. Установить флаг setChanged()
5.2. Отправить обсерверу заказ notifyObservers(order);


****************************************************************
Задание 2
1. Мы много работаем с консолью. Пора создать единую точку взаимодействия.
Создайте класс ConsoleHelper с единственным BufferedReader, через который будете работать с консолью.
Запомните, этот класс не хранит никаких данных и состояний, поэтому все методы будут статическими.
Создайте в нем три метода:
-writeMessage(String message) - для вывода message в консоль
-String readString() - для чтения строки с консоли
-List<Dish> getAllDishesForOrder() - просит ползователя выбрать блюдо и добавляет его в список. Введенное 'exit' означает завершение заказа.
исключения пробрасывайте выше, на этом уровне не понятно, что с ними делать.

2. Отрефакторьте код - работа с консолью должна быть только через класс ConsoleHelper

3. Вернемся к классу Order: в нем есть ссылка на планшет, и еще есть список выбранных блюд.
Создайте поле dishes - список блюд. Инициализируйте его в конструкторе, вызвав метод getAllDishesForOrder из ConsoleHelper.

4. Перепишите метод toString в классе Order. Пусть он возвращает пустую строку, если нет блюд в заказе, иначе
вывод должен быть аналогичный примеру в порядке добавления блюд. Используйте ConsoleHelper.
Пример:
Your order: [Juice, Fish] of Tablet{number=5}

5. У нас все завязано на работу с консолью. Однако, при возникновении исключений, наше приложение умрет.
Чтобы узнать причину - добавим в Tablet статический логгер java.util.logging.Logger, инициализированный именем класса.

6. В методе createOrder класса Tablet обработаем исключения ввода-вывода.
Запишем в лог "Console is unavailable.". Уровень лога - SEVERE - это самый серьезный уровень, мы не можем работать.

7. Надо начинать тестировать наше приложение.
Добавьте в main создание планшета и создание заказа - new Tablet(5).createOrder();


****************************************************************
Задание 1

Давай напишем программу для автоматизации работы в ресторане.
Пусть задание сформулировано так - директор ресторана хочет, чтобы:
1) на каждом столике лежал планшет, через который можно будет сделать заказ
2) пока заказ готовится, на планщете показывалась реклама
3) в конце рабочего дня была возможность посмотреть различную статистику
 а) загрузки повара
 б) сумму выручки за заказы
 в) сумму выручки за показы рекламы

Мы будем разрабатывать ядро, без UI. UI ты потом сможешь дописать самостоятельно, сейчас ограничимся консольным интерфейсом.
Также мы часть данных захардкодим, ты потом сможешь прикрутить БД, и работать с ней.

Выделим несколько фич, которые будем реализовывать:
Первая:
-созданный посетителем заказ будет автоматически поступать к повару
-повар будет готовить его какое-то время и отмечать приготовленным
-после этого официант будет относить его
Вторая:
-подобрать нужные рекламные ролики из списка оплаченных
-отображение рекламных роликов во время приготовления заказа
-максимизировать прибыль от показа рекламы
Третья:
-подсчет статистики
-отображение статистики директору

Начнем с первой фичи - автоматизация обработки заказа:
Итак..
1. Создайте класс Restaurant с методом main.

2. Начнем с планшета, создадим класс Tablet, в котором создадим поле final int number - это номер планшета,
чтобы можно было однозначно установить, откуда поступил заказ, должен инициализироваться в конструкторе.

3. В классе Tablet создадим метод public void createOrder(), который будет создавать заказ из тех блюд, которые выберет пользователь.
Для этого создадим класс Order, который поместим в пакет kitchen.
Итак, что делает createOrder? Он создает заказ и выводит его данные (список блюд, об этом позднее) в консоль.

4. В классе Order (заказ) должна быть информация, относящаяся к списку выбранных пользователем блюд.
Т.е. где-то должен быть список всех блюд, и должен быть список выбранных блюд в классе Order.
Нам нужен класс Dish(Блюдо), создадим его в пакете kitchen. Пусть это будет энум с какими-то данными, например, Fish, Steak, Soup, Juice, Water

5. Чтобы пользователь мог выбрать себе блюда, нужно их все ему отобразить. Для этого в Dish создайте метод
public static String allDishesToString(), который сформирует строку из всех блюд.
Пример, "Fish, Steak, Soup, Juice, Water". Формируйте строку динамически.



****************************************************************
Задание 4

1. В корне задачи создай интерфейс AbstractFactory, в который вынеси сигнатуру общего в фабриках метода.

2. Реализуй интерфейс AbstractFactory в обеих фабриках.

3. В корне задачи создай класс FactoryProducer, в котором создай публичный статический энум HumanFactoryType
со значениями MALE, FEMALE.

4. В FactoryProducer создайт публичный статический метод getFactory с аргументом HumanFactoryType.
Этот метод должен возвращать одну из фабрик: для ключа MALE - MaleFactory, для FEMALE - FemaleFactory.

Молодец, Фабрика фабрик готова!  Это паттерн Abstract Factory.
В коде тебе не важно, какая фабрика используется.

Твои успехи:
1. освоен паттерн Factory Method
2. освоен паттерн Abstract Factory
3. +2 паттерна для прохождения собеседования
Работа джава программистом стала еще ближе, скоро достигнешь цели!


****************************************************************
Задание 3

1. Создай пакет female, в котором  создай KidGirl, TeenGirl и Woman аналогично классам из пакета male.

2. Перенеси класс MaleFactory в пакет male.

3. Создай в пакете female фабрику FemaleFactory аналогичную MaleFactory с тем же принципом получения объектов.

4. Подумай, что общего у двух фабрик? Что можно сделать, чтобы легко можно было переключаться между ними?
Ответ - в следующем задании.


****************************************************************
Задание 2

1. Создай публичный класс MaleFactory с публичным методом getPerson, который принимает один параметр int age (возраст) и
возвращает нужный объект одного из классов, реализующих интерфейс Human.

2. Логика метода getPerson: используя константу MAX_AGE определи, какой класс соответствует переданному возрасту.
Например, age=4 соответствует мальчику (KidBoy), age=15 - подростку (TeenBoy), остальной возраст - взрослому мужчине.

3. Создай свой класс Solution, и добавь в метод main создание фабрики и вызови у нее метод getPerson три раза с такими параметрами: 99, 4, 15.
Выведи результат в консоль.
Вывод должен быть следующий:
Man{}
KidBoy{}
TeenBoy{}

Молодец, Фабрика готова!  Это паттерн Factory Method.


****************************************************************
Задание 1 - Фабрики

Привет!
Сейчас ты будешь разбираться с паттерном Factory Method. Возьмем пример с людьми.
Будем определять, к какому типу относится человек в зависимости от его возраста.

В этом задании подготовим данные, которые будем использовать в фабрике.

1. Для всех типов людей создай общий интерфейс Human.

2. Будем делать Factory для мужчин. Для этого создай пакет male, в котором создай классы KidBoy, TeenBoy, Man.
Во всех этих классах реализуй интерфейс Human.

3. В каждом классе KidBoy, TeenBoy создай свою публичную константу MAX_AGE с соответствующими значениями: 12, 19.

4. Сгенерируй автоматические методы toString для каждого класса KidBoy, TeenBoy, Man (чтобы получилось, например, Man{} для класса Man)



Задание 7

Теперь добавим поддержку дополнительного параметра запроса в наш QL.
Дополнительный параметр будет отвечать за диапазон дат, которые нас интересуют.
Пример запроса: get ip for user = "Eduard Petrovich Morozko" and date between
"11.12.2013 0:00:00" and "03.01.2014 23:59:59". Ожидаемый результат: Set<String> с
записями: 127.0.0.1 и 146.34.15.5.

Общий формат запроса:
get field1 for field2 = "value1" and date between "value2" and "value3"
Дополнительным параметром может быть только интервал дат, который нас
интересует.

Поддержка старых форматов запросов должна сохраниться.

****************************************************************

Задание 6

Давай добавим поддержку параметра запроса в наш QL.
Примеры запросов с параметром:
1)	get ip for user = "Vasya"
2)	get user for event = "DONE_TASK"
3)	get event for date = "03.01.2014 03:45:23"
Общий формат запроса с параметром:
get field1 for field2 = "value1"
Где: field1 - одно из полей: ip, user, date, event или status;
field2 - одно из полей: ip, user, date, event или status;
value1 - значение поля field2.

Алгоритм обработки запроса следующий: просматриваем записи в логе, если поле 
field2 имеет значение  value1, то добавляем поле field1 в множество, которое затем 
будет возвращено методом execute.

Пример: Вызов метода execute("get event for date = \"30.01.2014 12:56:22\"") должен
вернуть Set<Event>, содержащий только одно событие SOLVE_TASK. Какая именно 
задача решалась возвращать не нужно.

****************************************************************

Задание 5

Как ты заметил существует огромное количество комбинаций параметров для выбора
определенных записей из лог файла. Покрыть их все соответствующими методами
дело не благодарное.  Поэтому мы реализуем свой язык запросов (QL).
Пример запроса:
      get ip for user = "Vasya"
Такой запрос должен будет вернуть все IP адреса, с которых пользователь Vasya что-то
делал и это отображено в нашем логе.
Представь, как будет удобно ввести запрос в консоль и получить необходимую
информацию из лога.

5.1.	Реализуй интерфейс QLQuery у класса LogParser. Метод execute() пока должен
поддерживать только следующие запросы:
5.1.1.	get ip
5.1.2.	get user
5.1.3.	get date
5.1.4.	get event
5.1.5.	get status

Пример: Вызов метода execute("get ip") должен вернуть Set<String>, содержащий все
уникальные IP из лога (это будет: 127.0.0.1, 12.12.12.12, 146.34.15.5, 192.168.100.2
для тестового файла). Аналогично должны работать и другие запросы.

Реальные объекты в возвращаемом множестве должны быть типа String для запросов ip и user,
для запроса date - тип объектов Date, для event и status - Event и Status соответственно.

****************************************************************

Задание 4

Реализуй интерфейс EventQuery у класса LogParser:
4.1.	Метод getNumberOfAllEvents() должен возвращать количество различных типов
событий за указанный период.
4.2.	Метод getAllEvents() должен возвращать события за указанный период.
4.3.	Метод getEventsForIP() должен возвращать события, которые происходили с
указанного IP.
4.4.	Метод getEventsForUser() должен возвращать события, которые инициировал 
определенный пользователь.
4.5.	Метод getFailedEvents() должен возвращать события, которые не выполнились.
4.6.	Метод getErrorEvents() должен возвращать события, которые завершились 
ошибкой.
4.7.	Метод getNumberOfAttemptToSolveTask() должен возвращать количество попыток 
решить определенную задачу.
4.8.	Метод getNumberOfSuccessfulAttemptToSolveTask() должен возвращать количество 
успешных решений определенной задачи.
4.9.	Метод getAllSolvedTasksAndTheirNumber() должен возвращать мапу (номер_задачи :
количество_попыток_решить_ее).
4.10.	Метод getAllDoneTasksAndTheirNumber() должен возвращать мапу (номер_задачи :
сколько_раз_ее_решили).

****************************************************************

Задание 3

Реализуй интерфейс DateQuery у класса LogParser:
3.1.	Метод getDatesForUserAndEvent() должен возвращать даты, когда определенный 
пользователь произвел определенное событие.
3.2.	Метод getDatesWhenSomethingFailed() должен возвращать даты, когда 
определенное событие не выполнилось (статус FAILED).
3.3.	Метод getDatesWhenErrorHappened() должен возвращать даты, когда 
определенное событие закончилось ошибкой (статус ERROR).
3.4.	Метод getDateWhenUserLoggedFirstTime() должен возвращать дату, когда 
пользователь залогинился впервые за указанный период.
3.5.	Метод getDateWhenUserSolvedTask() должен возвращать дату, когда пользователь 
впервые попытался решить определенную задачу.
3.6.	Метод getDateWhenUserDoneTask() должен возвращать дату, когда пользователь 
решил определенную задачу.
3.7.	Метод getDatesWhenUserWroteMessage() должен возвращать даты, когда 
пользователь написал сообщение.
3.8.	Метод getDatesWhenUserDownloadedPlugin() должен возвращать даты, когда 
пользователь скачал плагин.

****************************************************************

Задание 2

Реализуй интерфейс UserQuery у класса LogParser:
2.1.	Метод getAllUsers() должен возвращать всех пользователей.
2.2.	Метод getNumberOfUsers() должен возвращать количество уникальных 
пользователей.
2.3.	Метод getNumberOfUserEvents() должен возвращать количество событий от 
определенного пользователя.
2.4.	Метод getUsersForIP() должен возвращать пользователей с определенным IP. 
Несколько пользователей могут использовать один и тот же IP.
2.5.	Метод getLoggedUsers() должен возвращать пользователей, которые были 
залогинены.
2.6.	Метод getDownloadedPluginUsers() должен возвращать пользователей, которые 
скачали плагин.
2.7.	Метод getWroteMessageUsers() должен возвращать пользователей, которые 
отправили сообщение.
2.8.	Метод getSolvedTaskUsers(Date after, Date before) должен возвращать 
пользователей, которые решали любую задачу.
2.9.	Метод getSolvedTaskUsers(Date after, Date before, int task) должен возвращать 
пользователей, которые решали задачу с номером task.
2.10.	Метод getDoneTaskUsers(Date after, Date before) должен возвращать 
пользователей, которые решили любую задачу.
2.11.	Метод getDoneTaskUsers(Date after, Date before, int task) должен возвращать 
пользователей, которые решали задачу с номером task.

****************************************************************

Задание 1

Сегодня мы напишем парсер логов.
Лог файл имеет следующий формат:
ip username date event status
Где:
ip - ip адрес с которого пользователь произвел событие.
user - имя пользователя (одно или несколько слов разделенные пробелами).
date - дата события в формате day.month.year hour:minute:second
event - одно из событий:
	LOGIN - пользователь залогинился,
    DOWNLOAD_PLUGIN - пользователь скачал плагин,
    WRITE_MESSAGE - пользователь отправил сообщение,
    SOLVE_TASK - пользователь попытался решить задачу,
    DONE_TASK - пользователь решил задачу.
Для событий SOLVE_TASK и DONE_TASK существует дополнительный параметр, 
который указывается через пробел, это номер задачи.
status - статус:
    OK - событие выполнилось успешно,
    FAILED - событие не выполнилось,
    ERROR - произошла ошибка.
      
Пример строки из лог файла:
"146.34.15.5	Eduard Petrovich Morozko	05.01.2021 20:22:55	DONE_TASK 48	FAILED".
Записи внутри лог файла не обязательно упорядочены по дате, события могли 
произойти и быть записаны в лог в разной последовательности.

Класс, который будет отвечать за парсинг логов называется LogParser.
1.1.	Добавь в класс LogParser конструктор с парметром Path logDir, где logDir -
директория с логами (логов может быть несколько, все они должны иметь расширение log).
1.2.	Реализуй интерфейс IPQuery у класса LogParser:
1.2.1.	Метод getNumberOfUniqueIPs(Date after, Date before) должен возвращать 
количество уникальных IP адресов за выбранный период. Здесь и далее, 
если в методе есть параметры Date after и Date before, то нужно возвратить 
данные касающиеся только данного периода (включая даты after и before).
Если параметр after равен null, то нужно обработать все записи, у которых 
дата меньше или равна before.
Если параметр before равен null, то нужно обработать все записи, у которых 
дата больше или равна after.
Если и after, и before равны null, то нужно обработать абсолютно все записи 
(без фильтрации по дате).
1.2.2.	Метод getUniqueIPs() должен возвращать множество, содержащее все 
неповторяющиеся IP. Тип в котором будем хранить IP будет String.
1.2.3.	Метод getIPsForUser() должен возвращать IP, с которых работал 
переданный пользователь.
1.2.4.	Метод getIPsForEvent() должен возвращать IP, с которых было произведено 
переданное событие.
1.2.5.	Метод getIPsForStatus() должен возвращать IP, события с которых 
закончилось переданным статусом.

Реализацию метода main() можешь менять по своему усмотрению.